// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"

	"sql"
)

const createCategory = `-- name: CreateCategory :one

INSERT INTO categories (id, name, description)
VALUES ($1, $2, $3)
    RETURNING id, name, description
`

type CreateCategoryParams struct {
	ID          string         `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

// Category queries
func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.ID, arg.Name, arg.Description)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const createProduct = `-- name: CreateProduct :one

INSERT INTO products (id, name, price, category_id)
VALUES ($1, $2, $3, $4)
RETURNING id, name, price, category_id
`

type CreateProductParams struct {
	ID         string         `json:"id"`
	Name       string         `json:"name"`
	Price      float64        `json:"price"`
	CategoryID sql.NullString `json:"category_id"`
}

// Product queries
func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.CategoryID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CategoryID,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one

INSERT INTO users (id, name, email, password)
VALUES ($1, $2, $3, $4)
    RETURNING id, name, email
`

type CreateUserParams struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type CreateUserRow struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

// User queries
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories
WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, id)
	return err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getActivityByUserId = `-- name: GetActivityByUserId :many
SELECT user_id, product_id, action
FROM user_activities
WHERE user_id = $1
`

func (q *Queries) GetActivityByUserId(ctx context.Context, userID string) ([]UserActivity, error) {
	rows, err := q.db.QueryContext(ctx, getActivityByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserActivity
	for rows.Next() {
		var i UserActivity
		if err := rows.Scan(&i.UserID, &i.ProductID, &i.Action); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllActivities = `-- name: GetAllActivities :many
SELECT user_id, product_id, action
FROM user_activities
`

func (q *Queries) GetAllActivities(ctx context.Context) ([]UserActivity, error) {
	rows, err := q.db.QueryContext(ctx, getAllActivities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserActivity
	for rows.Next() {
		var i UserActivity
		if err := rows.Scan(&i.UserID, &i.ProductID, &i.Action); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllCategories = `-- name: GetAllCategories :many
SELECT id, name, description
FROM categories
`

func (q *Queries) GetAllCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, name, price, category_id
FROM products
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, name, email
FROM users
`

type GetAllUsersRow struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT id, name, description
FROM categories
WHERE id = $1
`

func (q *Queries) GetCategoryByID(ctx context.Context, id string) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoryByID, id)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, price, category_id
FROM products
WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CategoryID,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, password
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const saveActivity = `-- name: SaveActivity :exec

INSERT INTO user_activities (user_id, product_id, action)
VALUES ($1, $2, $3)
    ON CONFLICT (user_id, product_id) DO UPDATE
                                             SET action = $3
`

type SaveActivityParams struct {
	UserID    string `json:"user_id"`
	ProductID string `json:"product_id"`
	Action    string `json:"action"`
}

// UserActivity queries
func (q *Queries) SaveActivity(ctx context.Context, arg SaveActivityParams) error {
	_, err := q.db.ExecContext(ctx, saveActivity, arg.UserID, arg.ProductID, arg.Action)
	return err
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET name = $2, description = $3
WHERE id = $1
RETURNING id, name, description
`

type UpdateCategoryParams struct {
	ID          string         `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, updateCategory, arg.ID, arg.Name, arg.Description)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET name = $2, price = $3, category_id = $4
WHERE id = $1
RETURNING id, name, price, category_id
`

type UpdateProductParams struct {
	ID         string         `json:"id"`
	Name       string         `json:"name"`
	Price      float64        `json:"price"`
	CategoryID sql.NullString `json:"category_id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.CategoryID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CategoryID,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name = $2, email = $3, password = $4
WHERE id = $1
RETURNING id, name, email
`

type UpdateUserParams struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type UpdateUserRow struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i UpdateUserRow
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}
